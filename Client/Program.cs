using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Net.Http;
using System.Timers;
using System.Security.Cryptography;
using System.Data.Entity;
using Client.Struct;

namespace Client
{
    using System;
    using System.Diagnostics;

    using ConsoleApp4;
    using Microsoft.IdentityModel.Clients.ActiveDirectory;
    using Microsoft.OData.Client;
    using Microsoft.OData.Edm;
    using System.Linq;
    using System.Net;
    using System.Configuration;
    using Newtonsoft.Json;

    public class Program
    {
        private static string _ApplicationAppId =       ConfigurationManager.AppSettings["ApplicationAppId"];
        private static Uri _ApplicationRedirectUri =    new Uri(ConfigurationManager.AppSettings["ApplicationRedirectUri"]);
        private static AuthenticationResult authenticationResult;
        private static AuthenticationContext authenticationContext;

        private static TimeSpan SMSReminder1TimeSpanBefore = TimeSpan.Parse(ConfigurationManager.AppSettings["SMSReminder1TimeSpanBefore"]);
        private static TimeSpan SMSReminder2TimeSpanBefore = TimeSpan.Parse(ConfigurationManager.AppSettings["SMSReminder2TimeSpanBefore"]);
        private static TimeSpan SMSReminder3TimeSpanBefore = TimeSpan.Parse(ConfigurationManager.AppSettings["SMSReminder3TimeSpanBefore"]);
        private static TimeSpan SMSSurveyTimeSpanBefore = TimeSpan.Parse(ConfigurationManager.AppSettings["SMSSurveyTimeSpanBefore"]);


        private static string _SMSSenderFrom =          ConfigurationManager.AppSettings["SMSSenderFrom"];
        private static string _SMSServiceUserName =     ConfigurationManager.AppSettings["SMSServiceUserName"];
        private static string _SMSServicePassword  =    ConfigurationManager.AppSettings["SMSServicePassword"];
        private static string _BookingBusinessesID =    ConfigurationManager.AppSettings["BookingBusinessesID"];
        private static BookingEntities db;
        
        private static Timer callGraphServiceTimer = new Timer(200000);
        

        public static void Main()
        {
            callGraphServiceTimer.Start();
            callGraphServiceTimer.Elapsed +=  (sender, e) =>  HandleTimer(sender, e);

            ViaNettSMS viaNettSMS = new ViaNettSMS(_SMSServiceUserName, _SMSServicePassword);
            
            try
            {
                // ADAL: https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-authentication-libraries
                authenticationContext = new AuthenticationContext(GraphService.DefaultAadInstance, TokenCache.DefaultShared);

                authenticationResult = authenticationContext.AcquireTokenAsync(
                    GraphService.ResourceId,
                    _ApplicationAppId,
                    _ApplicationRedirectUri,
                    new PlatformParameters(PromptBehavior.RefreshSession)).Result;

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }


            // This BookingsContainer is generated by the ODATA v4 Client Code Generator
            // See https://odata.github.io and https://github.com/odata/odata.net for usage.
            // Note that the code generator customizes the entity and property names to PascalCase
            // so they match C# guidelines, while the EDM uses lower case camelCase, as per Graph guidelies.
            // Since the application is short lived, the delegate is simply returning the authorization
            // header obtained above; a long lived application would likely need to refresh the token
            // when it expires, so it would have a slightly more complex delegate.

            var graphService = new GraphService(
                    GraphService.DefaultV1ServiceRoot,
                    () =>
                    {
                        // Hvis Token timedout
                        // Forny Token
                        if (authenticationResult.ExpiresOn.ToLocalTime() >= DateTime.Now)
                        {
                            //refresh
                            // Har mulighet til å refreshe i 5 minutter etter token har utgått
                            authenticationResult = authenticationContext.AcquireTokenSilentAsync(GraphService.ResourceId, _ApplicationAppId).Result;
                            string _header = authenticationResult.CreateAuthorizationHeader();
                            return _header;
                        }
                        else
                        {
                            string _header = authenticationResult.CreateAuthorizationHeader();
                            return _header;
                        }

                    });



            // Fiddler makes it easy to look at the request/response payloads. Use it automatically if it is running.
            // https://www.telerik.com/download/fiddler
            if (System.Diagnostics.Process.GetProcessesByName("fiddler").Any())
            {
                graphService.WebProxy = new WebProxy(new Uri("http://localhost:8888"), false);
            }

            //Sett denne til max
            graphService.MaxPageSize = 100;
                
            var mybusiness = graphService.BookingBusinesses.ByKey(_BookingBusinessesID);

            // http://odata.github.io/odata.net/#04-02-query-options
            BookingBusiness _business = graphService.BookingBusinesses
                .Where(b => b.Id == _BookingBusinessesID)
                .FirstOrDefault();


            
            MD5 md5 = MD5.Create();
            // db = new BookingEntities();
            /*
                Main service loop
                */

            int exceptionCount = 0;

            while (true)
            {              

                using (var db = new BookingEntities())
                {
                
                    Console.WriteLine();
                    Console.WriteLine(DateTime.Now);
                    //Retrieve BookingAppointments from graphservice
                    //var oDataAppointments = mybusiness.Appointments.ToArray().Where(a => System.DateTime.Parse(a.Start.DateTime) >= DateTime.Now);

                    try
                    {
                        var oldAppointments = mybusiness.Appointments
                                        .Where(a => a.InvoiceStatus != BookingInvoiceStatus.Canceled).ToArray()
                                            .Where(a => System.DateTime.Parse(a.Start.DateTime) < DateTime.Now);


                        foreach (var item in oldAppointments)
                        {
                            Console.WriteLine($"{ item.Start.DateTime }");
                            var itemSingle = graphService.BookingBusinesses.ByKey(_BookingBusinessesID).Appointments.ByKey(item.Id);
                            var _item = itemSingle.PatchEntityWithChangeTracking();
                            _item.InvoiceStatus =  BookingInvoiceStatus.Canceled;
                            graphService.UpdateObject(_item);
                            graphService.SaveChanges(SaveChangesOptions.PostOnlySetProperties);
                        }

                    }
                    catch (Exception e)
                    {
                        Console.WriteLine($"ExceptionCount: {exceptionCount}  , exception: {e.InnerException.ToString()}");
                        exceptionCount++;
                        continue;
                    }


                    //   var context = new DefaultContainer(new Uri("http://services.odata.org/v4/(S(lqbvtwide0ngdev54adgc0lu))/TripPinServiceRW/"));

                    //   var person = context.People.ByKey(userName: "russellwhyte").GetValue(); // get an entity
                    //   person.FirstName = "Ross"; // change its property
                    //   context.UpdateObject(person); // create an update request

                    //   context.SaveChanges(); // send the request

                    /*
                    var testAppointmentsingle = graphService.BookingBusinesses.ByKey(_BookingBusinessesID).Appointments.ByKey("AAMkADBjYzI5MGZlLTFmMzctNDJhOS1hM2VkLTM0ODY2OWY4ZjYwYgBGAAAAAABI76yGzIqkTITnTV2sgs0XBwAB7TEfJhyqT4eOsSBlsdfcAAAAAAENAAAB7TEfJhyqT4eOsSBlsdfcAAAAABTzAAA=");
                    var testAppointment = testAppointmentsingle.PatchEntityWithChangeTracking();
                    testAppointment.CustomerEmailAddress = "expired";
                    graphService.UpdateObject(testAppointment);
                    graphService.SaveChanges(SaveChangesOptions.PostOnlySetProperties);
                    */

                    List<BookingAppointment> bookingAppointments = new List<BookingAppointment>();
                    try
                    {                        
                        bool endOfAppointments = false;
                        int skip = 0;
                        int top = 3;
                        while (!endOfAppointments)
                        {                        
                            var oDatares = mybusiness.Appointments.Where(a => a.InvoiceStatus != BookingInvoiceStatus.Canceled).Skip(skip).Take(top).ToList<BookingAppointment>();
                            if (oDatares.Count > 0)
                            {
                                bookingAppointments.AddRange(oDatares);
                                skip = skip + top;
                                System.Threading.Thread.Sleep(1000);                                
                            }
                            else
                            {
                                endOfAppointments = true;
                            }
                            
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.WriteLine(e.InnerException.ToString());
                        continue;
                    }    

                    //Create Entities from BookingAppointment collection
                    //Update and Add Entities
                    //Send SMS for New and Changed Appointments
                    //foreach (var oDataAppointment in oDataAppointments)
                    foreach (var oDataAppointment in bookingAppointments)
                    {
                        if (string.IsNullOrEmpty(oDataAppointment.CustomerId))
                        {
                            continue;
                        }

                        Appointment appointment = new Appointment
                        {
                            customerEmailAddress = oDataAppointment.CustomerEmailAddress,
                            customerId = oDataAppointment.CustomerId,
                            customerName = oDataAppointment.CustomerName,
                            customerPhone = Regex.Replace(oDataAppointment.CustomerPhone ?? "", @"[^\d+]", ""),
                            customerNotes = oDataAppointment.CustomerNotes,
                            Id = oDataAppointment.Id,
                            staffMemberIds = oDataAppointment.StaffMemberIds.FirstOrDefault(),
                            Start = System.DateTime.Parse(oDataAppointment.Start.DateTime).ToLocalTime(),
                            End = System.DateTime.Parse(oDataAppointment.End.DateTime).ToLocalTime(),
                            serviceId = oDataAppointment.ServiceId,
                            serviceName = oDataAppointment.ServiceName.ToLower(),
                            json = JsonConvert.SerializeObject(oDataAppointment),
                            md5 = Convert.ToBase64String(md5.ComputeHash(Encoding.UTF8.GetBytes(oDataAppointment.Id + oDataAppointment.Start.DateTime.ToString() + oDataAppointment.End.DateTime.ToString()))),
                            md5hash = md5.ComputeHash(Encoding.Unicode.GetBytes(oDataAppointment.Id))
                        };


                        Debug.WriteLine(appointment.json);

                        List<BookingAppointment> _list = new List<BookingAppointment>
                        {
                            oDataAppointment
                        };

                        switch (InsertOrUpdate(appointment, db))
                        {
                            case EntityState.Detached:
                                break;
                            case EntityState.Unchanged:
                                break;
                            case EntityState.Added:
                                // Ny Avtale
                                SendSMS(viaNettSMS, _business, _list, SMSTemplate.SMSConfirmation);
                                break;
                            case EntityState.Deleted:
                                break;
                            case EntityState.Modified:
                                // Avtalen er endret
                                SendSMS(viaNettSMS, _business, _list, SMSTemplate.SMSUpdate);
                                break;
                            default:
                                break;
                        }
                    }

                    //Create a list of Cancelled Appointments (Appointments in database not occuring from the graphservice.business.appointments )
                    List<byte[]> odataIDs;
                    try
                    {
                       odataIDs = bookingAppointments.Select(x => md5.ComputeHash(Encoding.Unicode.GetBytes(x.Id))).ToList<byte[]>();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine($"ExceptionCount: {exceptionCount}  , exception: {e.InnerException.ToString()}");
                        exceptionCount++;
                        continue;
                    }

                    /*
                     *
                     */

                    var deleteAppointments = from a in db.Appointment
                                                where !odataIDs.Contains(a.md5hash) && a.Start > DateTime.Now
                                                && a.appointmentIsActive == true
                                                select a;

                    var bookingAppointmentList = new List<BookingAppointment>();

                    //Update database for every Cancelled appointment and create a list of those Appointments
                    foreach (var appoint in deleteAppointments)
                    {
                        appoint.appointmentIsActive = false;
                        appoint.appointmentChangedDate = DateTime.Now;

                        var bappoint = JsonConvert.DeserializeObject<BookingAppointment>(appoint.json);
                        bookingAppointmentList.Add(bappoint);
                    }

                    try
                    {
                        db.SaveChanges();
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine($"ExceptionCount: {exceptionCount}  , exception: {e.InnerException.ToString()}");
                        exceptionCount++;
                        continue;
                    }

                    /* Send SMS for every Cancelled Appointments in the AppointmentList*/
                    SendSMS(viaNettSMS, _business, bookingAppointmentList, SMSTemplate.SMSCancellation);
                   

                    // Send Reminder SMS
                    DateTime rm1DateTimeMax = DateTime.Now.Add(SMSReminder1TimeSpanBefore);
                    DateTime rm2DateTimeMax = DateTime.Now.Add(SMSReminder2TimeSpanBefore);
                    //DateTime rm3DateTimeMax = DateTime.Now.Add(SMSReminder3TimeSpanBefore);
                    DateTime rm1DateTimeMin = rm1DateTimeMax.AddHours(-2);
                    DateTime rm2DateTimeMin = rm2DateTimeMax.AddHours(-2);
                    //DateTime rm3DateTimeMin = rm3DateTimeMax.AddHours(-2);
                    DateTime surveyDateTimeMin = DateTime.Now.Add(SMSSurveyTimeSpanBefore);


                    // 7 Dager
                    var reminder1Appointments = from a in db.Appointment
                                                where a.SMSLog.Where(s => s.smsTemplate == SMSTemplate.SMSReminder1.ToString() && s.smsIsSent == true).Count() < 1
                                                && a.Start < rm1DateTimeMax
                                                && a.Start > rm1DateTimeMin
                                                && !( a.appointmentCreatedDate < rm1DateTimeMax && a.appointmentCreatedDate > rm1DateTimeMin)
                                                && !string.IsNullOrEmpty(a.customerId)
                                                && a.appointmentIsActive == true
                                                select a;
                    // 2 Dager
                    var reminder2Appointments = from a in db.Appointment
                                                where a.SMSLog.Where(s => s.smsTemplate == SMSTemplate.SMSReminder2.ToString() && s.smsIsSent == true).Count() < 1
                                                && a.Start < rm2DateTimeMax
                                                && a.Start > rm2DateTimeMin
                                                && !(a.appointmentCreatedDate < rm2DateTimeMax && a.appointmentCreatedDate > rm2DateTimeMin)
                                                && !string.IsNullOrEmpty(a.customerId)
                                                && a.appointmentIsActive == true
                                                select a;
                    //// 1 Dag
                    //var reminder3Appointments = from a in db.Appointment
                    //                            where a.SMSLog.Where(s => s.smsTemplate == SMSTemplate.SMSReminder3.ToString() && s.smsIsSent == true).Count() < 1
                    //                            && a.Start < rm3DateTimeMax
                    //                            && a.Start > rm3DateTimeMin
                    //                            && !(a.appointmentCreatedDate < rm3DateTimeMax && a.appointmentCreatedDate > rm3DateTimeMin)
                    //                            select a;


                    var surveyAppointments =    from a in db.Appointment
                                                where a.SMSLog.Where(s => s.smsTemplate == SMSTemplate.SMSSurvey.ToString() && s.smsIsSent == true).Count() < 1
                                                && a.Start < surveyDateTimeMin
                                                && !string.IsNullOrEmpty( a.customerId )
                                                && a.appointmentIsActive == true
                                                select a;

                    List<BookingAppointment> reminder1List = new List<BookingAppointment>();
                    List<BookingAppointment> reminder2List = new List<BookingAppointment>();
                    List<BookingAppointment> surveyList = new List<BookingAppointment>();
                    //List<BookingAppointment> reminder3List = new List<BookingAppointment>();

                    foreach (var item in reminder1Appointments)
                    {
                        reminder1List.Add(
                             new BookingAppointment {
                                 Id = item.Id
                                ,CustomerName = item.customerName
                                ,CustomerPhone = item.customerPhone
                                ,ServiceName = item.serviceName
                                ,Start = new DateTimeTimeZone { DateTime =  DateTime.Parse(item.Start.ToString()).ToUniversalTime().ToString("o"), TimeZone = "UTC" }
                                ,CustomerEmailAddress = item.customerEmailAddress
                                ,End = new DateTimeTimeZone { DateTime = DateTime.Parse(item.End.ToString()).ToUniversalTime().ToString("o"), TimeZone = "UTC" }
                                ,Duration = new TimeSpan(1,0,0)
                                ,ServiceLocation = new Location {
                                     Address = new PhysicalAddress()
                                    ,Coordinates = new OutlookGeoCoordinates()
                                }
                            }
                        );                    
                    }

                    foreach (var item in reminder2Appointments)
                    {
                        reminder2List.Add(
                             new BookingAppointment {
                                 Id = item.Id
                                ,CustomerName = item.customerName
                                ,CustomerPhone = item.customerPhone
                                ,ServiceName = item.serviceName
                                ,Start = new DateTimeTimeZone { DateTime =  DateTime.Parse(item.Start.ToString()).ToUniversalTime().ToString("o"), TimeZone = "UTC" }
                                ,CustomerEmailAddress = item.customerEmailAddress
                                ,End = new DateTimeTimeZone { DateTime = DateTime.Parse(item.End.ToString()).ToUniversalTime().ToString("o"), TimeZone = "UTC" }
                                ,Duration = new TimeSpan(1,0,0)
                                ,ServiceLocation = new Location {
                                     Address = new PhysicalAddress()
                                    ,Coordinates = new OutlookGeoCoordinates()
                                }
                            }
                        );                    
                    }

                    foreach (var item in surveyAppointments)
                    {
                        surveyList.Add(
                             new BookingAppointment {
                                 Id = item.Id
                                ,CustomerName = item.customerName
                                ,CustomerPhone = item.customerPhone
                                ,ServiceName = item.serviceName
                                ,Start = new DateTimeTimeZone { DateTime =  DateTime.Parse(item.Start.ToString()).ToUniversalTime().ToString("o"), TimeZone = "UTC" }
                                ,CustomerEmailAddress = item.customerEmailAddress
                                ,End = new DateTimeTimeZone { DateTime = DateTime.Parse(item.End.ToString()).ToUniversalTime().ToString("o"), TimeZone = "UTC" }
                                ,Duration = new TimeSpan(1,0,0)
                                ,ServiceLocation = new Location {
                                     Address = new PhysicalAddress()
                                    ,Coordinates = new OutlookGeoCoordinates()
                                }
                            }
                        );                    
                    }

                    //foreach (var item in reminder3Appointments)
                    //{
                    //    reminder3List.Add(
                    //         new BookingAppointment {
                    //             Id = item.Id
                    //            ,CustomerName = item.customerName
                    //            ,CustomerPhone = item.customerPhone
                    //            ,ServiceName = item.serviceName
                    //            ,Start = new DateTimeTimeZone { DateTime =  DateTime.Parse(item.Start.ToString()).ToUniversalTime().ToString("o"), TimeZone = "UTC" }
                    //            ,CustomerEmailAddress = item.customerEmailAddress
                    //            ,End = new DateTimeTimeZone { DateTime = DateTime.Parse(item.End.ToString()).ToUniversalTime().ToString("o"), TimeZone = "UTC" }
                    //            ,Duration = new TimeSpan(1,0,0)
                    //            ,ServiceLocation = new Location {
                    //                 Address = new PhysicalAddress()
                    //                ,Coordinates = new OutlookGeoCoordinates()
                    //            }
                    //        }
                    //    );                    
                    //}


                    SendSMS(viaNettSMS, _business, reminder1List, SMSTemplate.SMSReminder1);
                    SendSMS(viaNettSMS, _business, reminder2List, SMSTemplate.SMSReminder2);
                    SendSMS(viaNettSMS, _business, surveyList, SMSTemplate.SMSSurvey);
                    //SendSMS(viaNettSMS, _business, reminder3List, SMSTemplate.SMSReminder3);

                    
                }

                System.Threading.Thread.Sleep(60000);
            }
            // End While       

        }

        private static void SendSMS(ViaNettSMS viaNettSMS, BookingBusiness _business, IEnumerable<BookingAppointment> _appointments, SMSTemplate sMSTemplate)
        {
            MD5 md5 = MD5.Create();

            foreach (BookingAppointment appointment in _appointments)
            {
                // Send SMS to Customer
                Console.WriteLine("Sending SMS to CustomerName: {0}, CustomerPhone: {1}", appointment.CustomerName, appointment.CustomerPhone);

                ViaNettSMS.Result result;
                string _appointmentDateString = DateTime.Parse(appointment.Start.DateTime).ToString("dd.MM.yyyy HH:mm");

                string message = RenderSMSTemplate(_business, appointment, _appointmentDateString, sMSTemplate);


                try
                {
                    // Send SMS through HTTP API
                    Console.WriteLine("{0} SendingSMS: {1} {2} {3}", Date.Now.ToString(), _SMSSenderFrom, appointment.CustomerPhone, message);
                    result = viaNettSMS.SendSMS(_SMSSenderFrom, appointment.CustomerPhone, message);
                    //result = viaNettSMS.SendSMS(_SMSSenderFrom, "40453626", message);


                    // Show Send SMS response
                    if (result.Success)
                    {
                        Debug.WriteLine("Message successfully sent");

                        using (BookingEntities context = new BookingEntities())
                        {
                            context.SMSLog.Add(new SMSLog {
                                appointmentId = appointment.Id
                               ,message = message
                               ,recipientPhone = appointment.CustomerPhone
                               ,sentDate = DateTime.Now
                               ,smsIsSent = true
                               ,sentResult = "OK"
                               ,smsTemplate = sMSTemplate.ToString()
                               ,md5hash = md5.ComputeHash(Encoding.Unicode.GetBytes(appointment.Id))
                            });
                            context.SaveChanges();
                        }                       
                    }
                    else
                    {
                        using (BookingEntities context = new BookingEntities())
                        {
                            context.SMSLog.Add(new SMSLog {
                                appointmentId = appointment.Id
                               ,message = message
                               ,recipientPhone = appointment.CustomerPhone
                               ,sentDate = DateTime.Now
                               ,smsIsSent = false
                               ,sentResult = $"Received error: {result.ErrorCode} {result.ErrorMessage}"
                               ,smsTemplate = sMSTemplate.ToString()
                               ,md5hash = md5.ComputeHash(Encoding.Unicode.GetBytes(appointment.Id))
                            });
                            context.SaveChanges();
                        }
                        Debug.WriteLine($"Received error: {result.ErrorCode} {result.ErrorMessage}");
                    }
                }
                catch (System.Net.WebException ex)
                {
                    //Catch error occurred while connecting to server.
                    Debug.WriteLine(ex.Message);
                }
            }
            md5.Dispose();
        }

        private static string RenderSMSTemplate(BookingBusiness _business, BookingAppointment appointment, string _appointmentDateString, SMSTemplate sMSTemplate)
        {
            string smsTemplateBody = ConfigurationManager.AppSettings[sMSTemplate.ToString()]; // String.Format(, appointment.ServiceName, _appointmentDateString);

            string messageFooter = ConfigurationManager.AppSettings["SMSFooter"];
            string message = (smsTemplateBody + messageFooter);

            message = message.Replace("%BookingAppointment.CustomerName%", appointment.CustomerName);
            message = message.Replace("%BookingAppointment.CustomerEmailAddress%", appointment.CustomerEmailAddress);
            message = message.Replace("%BookingAppointment.CustomerPhone%", appointment.CustomerPhone);
            message = message.Replace("%BookingAppointment.ServiceName%", appointment.ServiceName.ToLower());
            message = message.Replace("%BookingAppointment.Start%", System.DateTime.Parse(appointment.Start.DateTime).ToLocalTime().ToString("dd.MM.yyyy HH:mm"));
            message = message.Replace("%BookingAppointment.End%", System.DateTime.Parse(appointment.End.DateTime).ToLocalTime().ToString("dd.MM.yyyy HH:mm"));
            message = message.Replace("%BookingAppointment.Duration%", appointment.Duration.Minutes.ToString());
            message = message.Replace("%BookingAppointment.ServiceLocation.DisplayName%", appointment.ServiceLocation.DisplayName);
            message = message.Replace("%BookingAppointment.ServiceLocation.LocationEmailAddress%", appointment.ServiceLocation.LocationEmailAddress);
            message = message.Replace("%BookingAppointment.ServiceLocation.Address.Street%", appointment.ServiceLocation.Address.Street ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Address.City%", appointment.ServiceLocation.Address.City ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Address.State%", appointment.ServiceLocation.Address.State ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Address.CountryOrRegion%", appointment.ServiceLocation.Address.CountryOrRegion ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Address.PostalCode%", appointment.ServiceLocation.Address.PostalCode ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Coordinates.Altitude%", appointment.ServiceLocation.Coordinates.Altitude.ToString() ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Coordinates.Latitude%", appointment.ServiceLocation.Coordinates.Latitude.ToString() ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Coordinates.Longitude%", appointment.ServiceLocation.Coordinates.Longitude.ToString() ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Coordinates.Accuracy%", appointment.ServiceLocation.Coordinates.Accuracy.ToString() ?? "");
            message = message.Replace("%BookingAppointment.ServiceLocation.Coordinates.AltitudeAccuracy%", appointment.ServiceLocation.Coordinates.AltitudeAccuracy.ToString() ?? "");
            message = message.Replace("%BookingBusiness.Address.City%", _business.Address.City);
            message = message.Replace("%BookingBusiness.Address.Street%", _business.Address.Street);
            message = message.Replace("%BookingBusiness.Address.PostalCode%", _business.Address.PostalCode);
            message = message.Replace("%BookingBusiness.Address.State%", _business.Address.State);
            message = message.Replace("%BookingBusiness.Address.CountryOrRegion%", _business.Address.CountryOrRegion);
            message = message.Replace("%BookingBusiness.DisplayName%", _business.DisplayName);
            message = message.Replace("%BookingBusiness.Email%", _business.Email);
            message = message.Replace("%BookingBusiness.Phone%", _business.Phone);
            message = message.Replace("%BookingBusiness.PublicUrl%", _business.PublicUrl);
            message = message.Replace("%BookingBusiness.WebSiteUrl%", _business.WebSiteUrl);

           
            message = message.Replace("\\n", Environment.NewLine);
            return message;
        }

        public static EntityState InsertOrUpdate(Appointment appointment, BookingEntities db)
        {

            if (db.Appointment.Where(a => a.md5hash == appointment.md5hash).Where(a => a.md5 == appointment.md5).Count() > 0)
            {
                //db.Appointment.Attach(appointment);
                //db.Entry(appointment).State = EntityState.Unchanged;

                //db.SaveChanges();
                return EntityState.Unchanged;
            }
            else
            //if (db.Appointment.Any(a => a.Id == appointment.Id)  && 
            //    db.Appointment.Any(a => a.md5 != appointment.md5))
            //{
            if (db.Appointment.Where(a => a.md5hash == appointment.md5hash).Where(a => a.md5 != appointment.md5).Count() > 0)
            { 
                appointment.appointmentChangedDate = DateTime.Now;
                db.Appointment.Attach(appointment);
                db.Entry(appointment).State = EntityState.Modified;
                db.SaveChanges();
                return EntityState.Modified;
            }
            else
            {
                appointment.appointmentCreatedDate = DateTime.Now;
                appointment.appointmentIsActive = true;
                db.Appointment.Attach(appointment);
                db.Entry(appointment).State = EntityState.Added;
                db.Appointment.Add(appointment);
                db.SaveChanges();
                return EntityState.Added;
            }
        }

        private static async Task<string> GetAuthorizationHeader()
        {
            string applicationId = "992c7324-d113-4335-b4bb-13b7d4ace7ed";
            string authority = "https://login.microsoftonline.com/common/";
            Uri redirectUri = new Uri("https://redir/BookingSMSSample");
            AuthenticationContext context = new AuthenticationContext(authority);
            AuthenticationResult result = await context.AcquireTokenAsync("https://graph.microsoft.com", applicationId, redirectUri, new PlatformParameters(PromptBehavior.Auto));
            return result.CreateAuthorizationHeader();
        }

        private static async Task<string> GetBookingAppointments()
        {
            string authHeader = await GetAuthorizationHeader();
            HttpClient graphClient = new HttpClient();
            graphClient.DefaultRequestHeaders.Add("Authorization", authHeader);
            return await graphClient.GetStringAsync("https://graph.microsoft.com/beta/bookingBusinesses/Karrieresenter1@ostfoldfk.no/appointments");
        }

        private static void HandleTimer(object source, ElapsedEventArgs a)
        {
            //isTimeElapsed = true;
            Console.WriteLine("timerEvent Handled at: {0}", a.SignalTime.ToString());
            authenticationResult = authenticationContext.AcquireTokenSilentAsync(GraphService.ResourceId, _ApplicationAppId).Result;

        }


    }
}
